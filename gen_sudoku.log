nohup: ignoring input
warning: trait objects without an explicit `dyn` are deprecated
  --> src/ffi.rs:53:32
   |
53 |         let closure: &mut &mut for<'a> FnMut(&'a [u8], &'a [i8]) = mem::transmute(cb);
   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn for<'a> FnMut(&'a [u8], &'a [i8])`
   |
   = note: `#[warn(bare_trait_objects)]` on by default

warning: trait objects without an explicit `dyn` are deprecated
  --> src/ffi.rs:65:32
   |
65 |         let closure: &mut &mut for<'a> FnMut(&'a [i8], &'a [i8]) = mem::transmute(cb);
   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn for<'a> FnMut(&'a [i8], &'a [i8])`

warning: trait objects without an explicit `dyn` are deprecated
  --> src/ffi.rs:72:22
   |
72 |     let mut cb: &mut for<'a> FnMut(&'a [u8], &'a [u8]) = &mut f;
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn for<'a> FnMut(&'a [u8], &'a [u8])`

warning: trait objects without an explicit `dyn` are deprecated
  --> src/ffi.rs:99:22
   |
99 |     let mut cb: &mut for<'a> FnMut(&'a [u8], &'a [u8]) = &mut f;
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn for<'a> FnMut(&'a [u8], &'a [u8])`

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
 --> src/ffi.rs:8:28
  |
8 | use libc::{size_t, c_char, uint8_t, uint32_t, int32_t, c_void};
  |                            ^^^^^^^
  |
  = note: `#[warn(deprecated)]` on by default

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
 --> src/ffi.rs:8:37
  |
8 | use libc::{size_t, c_char, uint8_t, uint32_t, int32_t, c_void};
  |                                     ^^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
 --> src/ffi.rs:8:47
  |
8 | use libc::{size_t, c_char, uint8_t, uint32_t, int32_t, c_void};
  |                                               ^^^^^^^

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
  --> src/ffi.rs:22:25
   |
22 |     fn gen_keypair(len: uint32_t, h: *mut c_void, cb: extern fn(*mut c_void, *const c_char, size_t, *const c_char, size_t));//n
   |                         ^^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
  --> src/ffi.rs:23:48
   |
23 |     fn load_keypair(pk_s: *const c_char, pk_l: int32_t, vk_s: *const c_char, vk_l: int32_t)
   |                                                ^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
  --> src/ffi.rs:23:84
   |
23 |     fn load_keypair(pk_s: *const c_char, pk_l: int32_t, vk_s: *const c_char, vk_l: int32_t)
   |                                                                                    ^^^^^^^

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
  --> src/ffi.rs:26:45
   |
26 |                  cb: extern fn(*mut c_void, uint32_t, *const uint8_t, *const c_char, int32_t), 
   |                                             ^^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:26:62
   |
26 |                  cb: extern fn(*mut c_void, uint32_t, *const uint8_t, *const c_char, int32_t), 
   |                                                              ^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
  --> src/ffi.rs:26:86
   |
26 |                  cb: extern fn(*mut c_void, uint32_t, *const uint8_t, *const c_char, int32_t), 
   |                                                                                      ^^^^^^^

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
  --> src/ffi.rs:28:23
   |
28 |                  len: uint32_t, solution: *const uint8_t,
   |                       ^^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:28:50
   |
28 |                  len: uint32_t, solution: *const uint8_t,
   |                                                  ^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:29:30
   |
29 |                  key: *const uint8_t, h_of_key: *const uint8_t) -> bool;
   |                              ^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:29:56
   |
29 |                  key: *const uint8_t, h_of_key: *const uint8_t) -> bool;
   |                                                        ^^^^^^^

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
  --> src/ffi.rs:30:28
   |
30 |     fn decrypt_solution(n: uint32_t, enc: *mut uint8_t, key: *const uint8_t);
   |                            ^^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:30:48
   |
30 |     fn decrypt_solution(n: uint32_t, enc: *mut uint8_t, key: *const uint8_t);
   |                                                ^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:30:69
   |
30 |     fn decrypt_solution(n: uint32_t, enc: *mut uint8_t, key: *const uint8_t);
   |                                                                     ^^^^^^^

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
  --> src/ffi.rs:32:26
   |
32 |                     len: uint32_t,
   |                          ^^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:33:35
   |
33 |                     proof: *const uint8_t,
   |                                   ^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
  --> src/ffi.rs:34:32
   |
34 |                     proof_len: int32_t,
   |                                ^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:36:38
   |
36 |                     h_of_key: *const uint8_t,
   |                                      ^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:37:42
   |
37 |                     enc_solution: *const uint8_t
   |                                          ^^^^^^^

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
  --> src/ffi.rs:46:59
   |
46 | extern "C" fn handle_proof_callback(cb: *mut c_void, len: uint32_t, encrypted_solution: *const uint8_t, proof: *const c_char, proof_len: ...
   |                                                           ^^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:46:96
   |
46 | extern "C" fn handle_proof_callback(cb: *mut c_void, len: uint32_t, encrypted_solution: *const uint8_t, proof: *const c_char, proof_len: ...
   |                                                                                                ^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
  --> src/ffi.rs:46:138
   |
46 | ...ted_solution: *const uint8_t, proof: *const c_char, proof_len: int32_t)//n
   |                                                                   ^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
   --> src/ffi.rs:143:78
    |
143 |     unsafe { snark_verify(ctx.keypair, len as u32, &proof[0], proof.len() as int32_t, &h_of_key[0], &encrypted_solution[0]) }
    |                                                                              ^^^^^^^

warning: unused variable: `a`
   --> src/main.rs:418:13
    |
418 |     fn from(a: bincode::serde::SerializeError) -> ProtoError {
    |             ^ help: if this is intentional, prefix it with an underscore: `_a`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `a`
   --> src/main.rs:424:13
    |
424 |     fn from(a: bincode::serde::DeserializeError) -> ProtoError {
    |             ^ help: if this is intentional, prefix it with an underscore: `_a`

warning: unused variable: `dimension`
  --> src/sudoku.rs:15:12
   |
15 |     fn new(dimension: usize) -> Possible {
   |            ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dimension`

warning: unused variable: `undo`
   --> src/sudoku.rs:218:21
    |
218 |                 let undo = cell.set(candidate);
    |                     ^^^^ help: if this is intentional, prefix it with an underscore: `_undo`

warning: variable does not need to be mutable
   --> src/main.rs:223:16
    |
223 |               |mut encrypted_solution, proof| {
    |                ----^^^^^^^^^^^^^^^^^^
    |                |
    |                help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
  --> src/sudoku.rs:87:13
   |
87 |         let mut grid = Sudoku::new(n);
   |             ----^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/sudoku.rs:97:13
   |
97 |         let mut grid = Sudoku::new(n);
   |             ----^^^^
   |             |
   |             help: remove this `mut`

warning: associated function is never used: `import_and_solve`
  --> src/sudoku.rs:93:12
   |
93 |     pub fn import_and_solve(n: usize, puzzle: &[u8]) -> Option<Vec<u8>> {
   |            ^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: associated function is never used: `inject`
   --> src/sudoku.rs:139:12
    |
139 |     pub fn inject(&self, other: &[u8]) {
    |            ^^^^^^

warning: associated function is never used: `print`
   --> src/sudoku.rs:164:12
    |
164 |     pub fn print(&self) {
    |            ^^^^^

warning: associated function is never used: `clearsome`
   --> src/sudoku.rs:232:12
    |
232 |     pub fn clearsome<R: Rng>(&mut self, rng: &mut R) {
    |            ^^^^^^^^^

warning: function is never used: `prompt`
  --> src/util.rs:24:8
   |
24 | pub fn prompt<T: whiteread::White>(prompt: &str) -> Option<T> {
   |        ^^^^^^

warning: unused `std::result::Result` that must be used
  --> src/sudoku.rs:88:9
   |
88 |         grid.solve(&mut rng);
   |         ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_must_use)]` on by default
   = note: this `Result` may be an `Err` variant, which should be handled

warning: `extern` block uses type `Keypair`, which is not FFI-safe
  --> src/ffi.rs:24:12
   |
24 |         -> *const Keypair;
   |            ^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: `#[warn(improper_ctypes)]` on by default
   = help: consider adding a member to this struct
   = note: this struct has no fields
note: the type is defined here
  --> src/ffi.rs:11:1
   |
11 | struct Keypair;
   | ^^^^^^^^^^^^^^^

warning: `extern` block uses type `Keypair`, which is not FFI-safe
  --> src/ffi.rs:25:27
   |
25 |     fn gen_proof(keypair: *const Keypair, h: *mut c_void,
   |                           ^^^^^^^^^^^^^^ not FFI-safe
   |
   = help: consider adding a member to this struct
   = note: this struct has no fields
note: the type is defined here
  --> src/ffi.rs:11:1
   |
11 | struct Keypair;
   | ^^^^^^^^^^^^^^^

warning: `extern` block uses type `Keypair`, which is not FFI-safe
  --> src/ffi.rs:31:30
   |
31 |     fn snark_verify(keypair: *const Keypair,
   |                              ^^^^^^^^^^^^^^ not FFI-safe
   |
   = help: consider adding a member to this struct
   = note: this struct has no fields
note: the type is defined here
  --> src/ffi.rs:11:1
   |
11 | struct Keypair;
   | ^^^^^^^^^^^^^^^

warning: unused `std::result::Result` that must be used
  --> src/util.rs:64:17
   |
64 |                 decoder.finish();
   |                 ^^^^^^^^^^^^^^^^^
   |
   = note: this `Result` may be an `Err` variant, which should be handled

warning: 46 warnings emitted

    Finished release [optimized] target(s) in 0.03s
     Running `target/release/pay-to-sudoku generate_sudoku 3`
Generating puzzle...
02 09 05 01 04 06 03 08 07 
07 01 04 08 02 03 06 05 09 
06 08 03 07 09 05 02 04 01 
03 07 01 05 08 09 04 06 02 
09 02 08 06 03 04 07 01 05 
05 04 06 02 07 01 08 09 03 
08 06 02 09 01 07 05 03 04 
04 05 09 03 06 02 01 07 08 
01 03 07 04 05 08 09 02 06

warning: trait objects without an explicit `dyn` are deprecated
  --> src/ffi.rs:53:32
   |
53 |         let closure: &mut &mut for<'a> FnMut(&'a [u8], &'a [i8]) = mem::transmute(cb);
   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn for<'a> FnMut(&'a [u8], &'a [i8])`
   |
   = note: `#[warn(bare_trait_objects)]` on by default

warning: trait objects without an explicit `dyn` are deprecated
  --> src/ffi.rs:65:32
   |
65 |         let closure: &mut &mut for<'a> FnMut(&'a [i8], &'a [i8]) = mem::transmute(cb);
   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn for<'a> FnMut(&'a [i8], &'a [i8])`

warning: trait objects without an explicit `dyn` are deprecated
  --> src/ffi.rs:72:22
   |
72 |     let mut cb: &mut for<'a> FnMut(&'a [u8], &'a [u8]) = &mut f;
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn for<'a> FnMut(&'a [u8], &'a [u8])`

warning: trait objects without an explicit `dyn` are deprecated
  --> src/ffi.rs:99:22
   |
99 |     let mut cb: &mut for<'a> FnMut(&'a [u8], &'a [u8]) = &mut f;
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn for<'a> FnMut(&'a [u8], &'a [u8])`

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
 --> src/ffi.rs:8:28
  |
8 | use libc::{size_t, c_char, uint8_t, uint32_t, int32_t, c_void};
  |                            ^^^^^^^
  |
  = note: `#[warn(deprecated)]` on by default

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
 --> src/ffi.rs:8:37
  |
8 | use libc::{size_t, c_char, uint8_t, uint32_t, int32_t, c_void};
  |                                     ^^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
 --> src/ffi.rs:8:47
  |
8 | use libc::{size_t, c_char, uint8_t, uint32_t, int32_t, c_void};
  |                                               ^^^^^^^

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
  --> src/ffi.rs:22:25
   |
22 |     fn gen_keypair(len: uint32_t, h: *mut c_void, cb: extern fn(*mut c_void, *const c_char, size_t, *const c_char, size_t));//n
   |                         ^^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
  --> src/ffi.rs:23:48
   |
23 |     fn load_keypair(pk_s: *const c_char, pk_l: int32_t, vk_s: *const c_char, vk_l: int32_t)
   |                                                ^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
  --> src/ffi.rs:23:84
   |
23 |     fn load_keypair(pk_s: *const c_char, pk_l: int32_t, vk_s: *const c_char, vk_l: int32_t)
   |                                                                                    ^^^^^^^

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
  --> src/ffi.rs:26:45
   |
26 |                  cb: extern fn(*mut c_void, uint32_t, *const uint8_t, *const c_char, int32_t), 
   |                                             ^^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:26:62
   |
26 |                  cb: extern fn(*mut c_void, uint32_t, *const uint8_t, *const c_char, int32_t), 
   |                                                              ^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
  --> src/ffi.rs:26:86
   |
26 |                  cb: extern fn(*mut c_void, uint32_t, *const uint8_t, *const c_char, int32_t), 
   |                                                                                      ^^^^^^^

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
  --> src/ffi.rs:28:23
   |
28 |                  len: uint32_t, solution: *const uint8_t,
   |                       ^^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:28:50
   |
28 |                  len: uint32_t, solution: *const uint8_t,
   |                                                  ^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:29:30
   |
29 |                  key: *const uint8_t, h_of_key: *const uint8_t) -> bool;
   |                              ^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:29:56
   |
29 |                  key: *const uint8_t, h_of_key: *const uint8_t) -> bool;
   |                                                        ^^^^^^^

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
  --> src/ffi.rs:30:28
   |
30 |     fn decrypt_solution(n: uint32_t, enc: *mut uint8_t, key: *const uint8_t);
   |                            ^^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:30:48
   |
30 |     fn decrypt_solution(n: uint32_t, enc: *mut uint8_t, key: *const uint8_t);
   |                                                ^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:30:69
   |
30 |     fn decrypt_solution(n: uint32_t, enc: *mut uint8_t, key: *const uint8_t);
   |                                                                     ^^^^^^^

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
  --> src/ffi.rs:32:26
   |
32 |                     len: uint32_t,
   |                          ^^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:33:35
   |
33 |                     proof: *const uint8_t,
   |                                   ^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
  --> src/ffi.rs:34:32
   |
34 |                     proof_len: int32_t,
   |                                ^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:36:38
   |
36 |                     h_of_key: *const uint8_t,
   |                                      ^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:37:42
   |
37 |                     enc_solution: *const uint8_t
   |                                          ^^^^^^^

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
  --> src/ffi.rs:46:59
   |
46 | extern "C" fn handle_proof_callback(cb: *mut c_void, len: uint32_t, encrypted_solution: *const uint8_t, proof: *const c_char, proof_len: ...
   |                                                           ^^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:46:96
   |
46 | extern "C" fn handle_proof_callback(cb: *mut c_void, len: uint32_t, encrypted_solution: *const uint8_t, proof: *const c_char, proof_len: ...
   |                                                                                                ^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
  --> src/ffi.rs:46:138
   |
46 | ...ted_solution: *const uint8_t, proof: *const c_char, proof_len: int32_t)//n
   |                                                                   ^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
   --> src/ffi.rs:143:78
    |
143 |     unsafe { snark_verify(ctx.keypair, len as u32, &proof[0], proof.len() as int32_t, &h_of_key[0], &encrypted_solution[0]) }
    |                                                                              ^^^^^^^

warning: unused variable: `a`
   --> src/main.rs:418:13
    |
418 |     fn from(a: bincode::serde::SerializeError) -> ProtoError {
    |             ^ help: if this is intentional, prefix it with an underscore: `_a`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `a`
   --> src/main.rs:424:13
    |
424 |     fn from(a: bincode::serde::DeserializeError) -> ProtoError {
    |             ^ help: if this is intentional, prefix it with an underscore: `_a`

warning: unused variable: `dimension`
  --> src/sudoku.rs:15:12
   |
15 |     fn new(dimension: usize) -> Possible {
   |            ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dimension`

warning: unused variable: `undo`
   --> src/sudoku.rs:218:21
    |
218 |                 let undo = cell.set(candidate);
    |                     ^^^^ help: if this is intentional, prefix it with an underscore: `_undo`

warning: variable does not need to be mutable
   --> src/main.rs:223:16
    |
223 |               |mut encrypted_solution, proof| {
    |                ----^^^^^^^^^^^^^^^^^^
    |                |
    |                help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
  --> src/sudoku.rs:87:13
   |
87 |         let mut grid = Sudoku::new(n);
   |             ----^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/sudoku.rs:97:13
   |
97 |         let mut grid = Sudoku::new(n);
   |             ----^^^^
   |             |
   |             help: remove this `mut`

warning: associated function is never used: `import_and_solve`
  --> src/sudoku.rs:93:12
   |
93 |     pub fn import_and_solve(n: usize, puzzle: &[u8]) -> Option<Vec<u8>> {
   |            ^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: associated function is never used: `inject`
   --> src/sudoku.rs:139:12
    |
139 |     pub fn inject(&self, other: &[u8]) {
    |            ^^^^^^

warning: associated function is never used: `print`
   --> src/sudoku.rs:164:12
    |
164 |     pub fn print(&self) {
    |            ^^^^^

warning: associated function is never used: `clearsome`
   --> src/sudoku.rs:232:12
    |
232 |     pub fn clearsome<R: Rng>(&mut self, rng: &mut R) {
    |            ^^^^^^^^^

warning: function is never used: `prompt`
  --> src/util.rs:24:8
   |
24 | pub fn prompt<T: whiteread::White>(prompt: &str) -> Option<T> {
   |        ^^^^^^

warning: unused `std::result::Result` that must be used
  --> src/sudoku.rs:88:9
   |
88 |         grid.solve(&mut rng);
   |         ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_must_use)]` on by default
   = note: this `Result` may be an `Err` variant, which should be handled

warning: `extern` block uses type `Keypair`, which is not FFI-safe
  --> src/ffi.rs:24:12
   |
24 |         -> *const Keypair;
   |            ^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: `#[warn(improper_ctypes)]` on by default
   = help: consider adding a member to this struct
   = note: this struct has no fields
note: the type is defined here
  --> src/ffi.rs:11:1
   |
11 | struct Keypair;
   | ^^^^^^^^^^^^^^^

warning: `extern` block uses type `Keypair`, which is not FFI-safe
  --> src/ffi.rs:25:27
   |
25 |     fn gen_proof(keypair: *const Keypair, h: *mut c_void,
   |                           ^^^^^^^^^^^^^^ not FFI-safe
   |
   = help: consider adding a member to this struct
   = note: this struct has no fields
note: the type is defined here
  --> src/ffi.rs:11:1
   |
11 | struct Keypair;
   | ^^^^^^^^^^^^^^^

warning: `extern` block uses type `Keypair`, which is not FFI-safe
  --> src/ffi.rs:31:30
   |
31 |     fn snark_verify(keypair: *const Keypair,
   |                              ^^^^^^^^^^^^^^ not FFI-safe
   |
   = help: consider adding a member to this struct
   = note: this struct has no fields
note: the type is defined here
  --> src/ffi.rs:11:1
   |
11 | struct Keypair;
   | ^^^^^^^^^^^^^^^

warning: unused `std::result::Result` that must be used
  --> src/util.rs:64:17
   |
64 |                 decoder.finish();
   |                 ^^^^^^^^^^^^^^^^^
   |
   = note: this `Result` may be an `Err` variant, which should be handled

warning: 46 warnings emitted

    Finished release [optimized] target(s) in 0.01s
     Running `target/release/pay-to-sudoku generate_sudoku 4`
Generating puzzle...
03 11 09 02 05 16 13 15 01 08 10 06 04 07 14 12 
13 01 10 12 08 09 03 07 15 02 04 14 05 06 11 16 
07 08 15 06 04 14 12 02 09 16 11 05 01 03 13 10 
14 16 05 04 06 11 01 10 13 12 03 07 08 02 09 15 
06 13 08 05 14 15 16 11 04 07 01 12 10 09 03 02 
11 03 02 07 10 13 05 09 16 14 15 08 12 04 01 06 
10 12 14 09 03 04 07 01 11 06 05 02 15 08 16 13 
01 15 04 16 12 02 08 06 10 03 13 09 11 05 07 14 
15 02 16 14 13 03 10 12 07 05 06 01 09 11 08 04 
05 06 11 10 09 01 04 08 03 13 14 16 02 15 12 07 
08 09 01 13 07 06 15 14 02 11 12 04 16 10 05 03 
04 07 12 03 11 05 02 16 08 15 09 10 13 14 06 01 
09 10 06 01 15 07 14 13 05 04 16 11 03 12 02 08 
12 14 03 11 02 10 09 04 06 01 08 13 07 16 15 05 
02 05 13 08 16 12 11 03 14 10 07 15 06 01 04 09 
16 04 07 15 01 08 06 05 12 09 02 03 14 13 10 11

warning: trait objects without an explicit `dyn` are deprecated
  --> src/ffi.rs:53:32
   |
53 |         let closure: &mut &mut for<'a> FnMut(&'a [u8], &'a [i8]) = mem::transmute(cb);
   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn for<'a> FnMut(&'a [u8], &'a [i8])`
   |
   = note: `#[warn(bare_trait_objects)]` on by default

warning: trait objects without an explicit `dyn` are deprecated
  --> src/ffi.rs:65:32
   |
65 |         let closure: &mut &mut for<'a> FnMut(&'a [i8], &'a [i8]) = mem::transmute(cb);
   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn for<'a> FnMut(&'a [i8], &'a [i8])`

warning: trait objects without an explicit `dyn` are deprecated
  --> src/ffi.rs:72:22
   |
72 |     let mut cb: &mut for<'a> FnMut(&'a [u8], &'a [u8]) = &mut f;
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn for<'a> FnMut(&'a [u8], &'a [u8])`

warning: trait objects without an explicit `dyn` are deprecated
  --> src/ffi.rs:99:22
   |
99 |     let mut cb: &mut for<'a> FnMut(&'a [u8], &'a [u8]) = &mut f;
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn for<'a> FnMut(&'a [u8], &'a [u8])`

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
 --> src/ffi.rs:8:28
  |
8 | use libc::{size_t, c_char, uint8_t, uint32_t, int32_t, c_void};
  |                            ^^^^^^^
  |
  = note: `#[warn(deprecated)]` on by default

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
 --> src/ffi.rs:8:37
  |
8 | use libc::{size_t, c_char, uint8_t, uint32_t, int32_t, c_void};
  |                                     ^^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
 --> src/ffi.rs:8:47
  |
8 | use libc::{size_t, c_char, uint8_t, uint32_t, int32_t, c_void};
  |                                               ^^^^^^^

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
  --> src/ffi.rs:22:25
   |
22 |     fn gen_keypair(len: uint32_t, h: *mut c_void, cb: extern fn(*mut c_void, *const c_char, size_t, *const c_char, size_t));//n
   |                         ^^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
  --> src/ffi.rs:23:48
   |
23 |     fn load_keypair(pk_s: *const c_char, pk_l: int32_t, vk_s: *const c_char, vk_l: int32_t)
   |                                                ^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
  --> src/ffi.rs:23:84
   |
23 |     fn load_keypair(pk_s: *const c_char, pk_l: int32_t, vk_s: *const c_char, vk_l: int32_t)
   |                                                                                    ^^^^^^^

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
  --> src/ffi.rs:26:45
   |
26 |                  cb: extern fn(*mut c_void, uint32_t, *const uint8_t, *const c_char, int32_t), 
   |                                             ^^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:26:62
   |
26 |                  cb: extern fn(*mut c_void, uint32_t, *const uint8_t, *const c_char, int32_t), 
   |                                                              ^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
  --> src/ffi.rs:26:86
   |
26 |                  cb: extern fn(*mut c_void, uint32_t, *const uint8_t, *const c_char, int32_t), 
   |                                                                                      ^^^^^^^

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
  --> src/ffi.rs:28:23
   |
28 |                  len: uint32_t, solution: *const uint8_t,
   |                       ^^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:28:50
   |
28 |                  len: uint32_t, solution: *const uint8_t,
   |                                                  ^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:29:30
   |
29 |                  key: *const uint8_t, h_of_key: *const uint8_t) -> bool;
   |                              ^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:29:56
   |
29 |                  key: *const uint8_t, h_of_key: *const uint8_t) -> bool;
   |                                                        ^^^^^^^

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
  --> src/ffi.rs:30:28
   |
30 |     fn decrypt_solution(n: uint32_t, enc: *mut uint8_t, key: *const uint8_t);
   |                            ^^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:30:48
   |
30 |     fn decrypt_solution(n: uint32_t, enc: *mut uint8_t, key: *const uint8_t);
   |                                                ^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:30:69
   |
30 |     fn decrypt_solution(n: uint32_t, enc: *mut uint8_t, key: *const uint8_t);
   |                                                                     ^^^^^^^

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
  --> src/ffi.rs:32:26
   |
32 |                     len: uint32_t,
   |                          ^^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:33:35
   |
33 |                     proof: *const uint8_t,
   |                                   ^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
  --> src/ffi.rs:34:32
   |
34 |                     proof_len: int32_t,
   |                                ^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:36:38
   |
36 |                     h_of_key: *const uint8_t,
   |                                      ^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:37:42
   |
37 |                     enc_solution: *const uint8_t
   |                                          ^^^^^^^

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
  --> src/ffi.rs:46:59
   |
46 | extern "C" fn handle_proof_callback(cb: *mut c_void, len: uint32_t, encrypted_solution: *const uint8_t, proof: *const c_char, proof_len: ...
   |                                                           ^^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:46:96
   |
46 | extern "C" fn handle_proof_callback(cb: *mut c_void, len: uint32_t, encrypted_solution: *const uint8_t, proof: *const c_char, proof_len: ...
   |                                                                                                ^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
  --> src/ffi.rs:46:138
   |
46 | ...ted_solution: *const uint8_t, proof: *const c_char, proof_len: int32_t)//n
   |                                                                   ^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
   --> src/ffi.rs:143:78
    |
143 |     unsafe { snark_verify(ctx.keypair, len as u32, &proof[0], proof.len() as int32_t, &h_of_key[0], &encrypted_solution[0]) }
    |                                                                              ^^^^^^^

warning: unused variable: `a`
   --> src/main.rs:418:13
    |
418 |     fn from(a: bincode::serde::SerializeError) -> ProtoError {
    |             ^ help: if this is intentional, prefix it with an underscore: `_a`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `a`
   --> src/main.rs:424:13
    |
424 |     fn from(a: bincode::serde::DeserializeError) -> ProtoError {
    |             ^ help: if this is intentional, prefix it with an underscore: `_a`

warning: unused variable: `dimension`
  --> src/sudoku.rs:15:12
   |
15 |     fn new(dimension: usize) -> Possible {
   |            ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dimension`

warning: unused variable: `undo`
   --> src/sudoku.rs:218:21
    |
218 |                 let undo = cell.set(candidate);
    |                     ^^^^ help: if this is intentional, prefix it with an underscore: `_undo`

warning: variable does not need to be mutable
   --> src/main.rs:223:16
    |
223 |               |mut encrypted_solution, proof| {
    |                ----^^^^^^^^^^^^^^^^^^
    |                |
    |                help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
  --> src/sudoku.rs:87:13
   |
87 |         let mut grid = Sudoku::new(n);
   |             ----^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/sudoku.rs:97:13
   |
97 |         let mut grid = Sudoku::new(n);
   |             ----^^^^
   |             |
   |             help: remove this `mut`

warning: associated function is never used: `import_and_solve`
  --> src/sudoku.rs:93:12
   |
93 |     pub fn import_and_solve(n: usize, puzzle: &[u8]) -> Option<Vec<u8>> {
   |            ^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: associated function is never used: `inject`
   --> src/sudoku.rs:139:12
    |
139 |     pub fn inject(&self, other: &[u8]) {
    |            ^^^^^^

warning: associated function is never used: `print`
   --> src/sudoku.rs:164:12
    |
164 |     pub fn print(&self) {
    |            ^^^^^

warning: associated function is never used: `clearsome`
   --> src/sudoku.rs:232:12
    |
232 |     pub fn clearsome<R: Rng>(&mut self, rng: &mut R) {
    |            ^^^^^^^^^

warning: function is never used: `prompt`
  --> src/util.rs:24:8
   |
24 | pub fn prompt<T: whiteread::White>(prompt: &str) -> Option<T> {
   |        ^^^^^^

warning: unused `std::result::Result` that must be used
  --> src/sudoku.rs:88:9
   |
88 |         grid.solve(&mut rng);
   |         ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_must_use)]` on by default
   = note: this `Result` may be an `Err` variant, which should be handled

warning: `extern` block uses type `Keypair`, which is not FFI-safe
  --> src/ffi.rs:24:12
   |
24 |         -> *const Keypair;
   |            ^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: `#[warn(improper_ctypes)]` on by default
   = help: consider adding a member to this struct
   = note: this struct has no fields
note: the type is defined here
  --> src/ffi.rs:11:1
   |
11 | struct Keypair;
   | ^^^^^^^^^^^^^^^

warning: `extern` block uses type `Keypair`, which is not FFI-safe
  --> src/ffi.rs:25:27
   |
25 |     fn gen_proof(keypair: *const Keypair, h: *mut c_void,
   |                           ^^^^^^^^^^^^^^ not FFI-safe
   |
   = help: consider adding a member to this struct
   = note: this struct has no fields
note: the type is defined here
  --> src/ffi.rs:11:1
   |
11 | struct Keypair;
   | ^^^^^^^^^^^^^^^

warning: `extern` block uses type `Keypair`, which is not FFI-safe
  --> src/ffi.rs:31:30
   |
31 |     fn snark_verify(keypair: *const Keypair,
   |                              ^^^^^^^^^^^^^^ not FFI-safe
   |
   = help: consider adding a member to this struct
   = note: this struct has no fields
note: the type is defined here
  --> src/ffi.rs:11:1
   |
11 | struct Keypair;
   | ^^^^^^^^^^^^^^^

warning: unused `std::result::Result` that must be used
  --> src/util.rs:64:17
   |
64 |                 decoder.finish();
   |                 ^^^^^^^^^^^^^^^^^
   |
   = note: this `Result` may be an `Err` variant, which should be handled

warning: 46 warnings emitted

    Finished release [optimized] target(s) in 0.01s
     Running `target/release/pay-to-sudoku generate_sudoku 5`
Generating puzzle...
07 01 12 15 25 06 02 17 09 16 10 11 19 03 22 20 04 08 23 05 21 18 24 14 13 
06 20 08 09 22 01 25 14 24 07 15 02 04 18 13 11 19 10 21 16 03 17 05 23 12 
19 04 13 05 10 15 03 22 11 08 06 21 23 12 14 01 17 02 24 18 20 09 16 25 07 
21 24 18 11 23 13 05 20 19 04 25 07 09 17 16 03 14 06 15 12 01 02 08 10 22 
03 02 14 16 17 21 10 23 18 12 08 01 05 20 24 22 09 07 13 25 19 11 15 06 04 
16 05 02 21 14 08 18 13 20 03 07 22 01 10 19 23 25 17 12 04 24 15 09 11 06 
04 12 25 01 08 24 22 21 17 11 02 20 14 06 09 05 15 13 16 07 23 19 03 18 10 
15 13 07 24 19 25 16 01 02 10 12 03 11 23 04 08 18 09 14 06 22 05 20 21 17 
09 23 10 22 03 14 04 12 15 06 05 18 17 16 08 19 21 24 11 20 13 01 07 02 25 
17 11 06 20 18 09 19 05 07 23 13 24 21 15 25 02 22 03 10 01 14 08 04 12 16 
11 18 09 10 12 05 14 04 03 24 23 13 06 01 21 07 08 25 02 15 17 16 22 19 20 
01 17 15 02 05 22 12 25 10 19 14 04 16 09 11 06 24 20 03 21 07 13 18 08 23 
20 14 03 25 07 18 17 11 23 15 19 12 22 08 02 16 05 04 09 13 06 10 21 24 01 
22 08 19 06 21 20 01 09 16 13 03 10 07 24 18 12 23 14 17 11 05 04 25 15 02 
24 16 23 04 13 02 06 07 08 21 20 17 15 25 05 10 01 18 19 22 11 12 14 03 09 
10 07 01 03 09 16 23 19 22 14 17 06 18 05 12 25 11 21 20 02 15 24 13 04 08 
12 19 11 18 20 04 15 03 25 01 21 16 08 13 23 09 10 22 07 24 02 14 06 17 05 
13 21 24 14 15 12 09 08 05 17 11 25 02 22 20 04 03 01 06 19 16 23 10 07 18 
23 06 05 17 02 07 20 24 13 18 04 09 10 19 01 15 16 12 08 14 25 21 11 22 03 
25 22 16 08 04 11 21 10 06 02 24 14 03 07 15 17 13 05 18 23 09 20 12 01 19 
05 25 17 12 16 19 24 02 01 20 18 15 13 04 03 21 07 11 22 08 10 06 23 09 14 
08 03 04 19 06 17 11 16 14 05 09 23 12 21 07 13 02 15 25 10 18 22 01 20 24 
14 09 21 23 01 03 13 18 12 25 22 05 20 11 10 24 06 19 04 17 08 07 02 16 15 
18 10 22 07 11 23 08 15 04 09 01 19 24 02 06 14 20 16 05 03 12 25 17 13 21 
02 15 20 13 24 10 07 06 21 22 16 08 25 14 17 18 12 23 01 09 04 03 19 05 11

warning: trait objects without an explicit `dyn` are deprecated
  --> src/ffi.rs:53:32
   |
53 |         let closure: &mut &mut for<'a> FnMut(&'a [u8], &'a [i8]) = mem::transmute(cb);
   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn for<'a> FnMut(&'a [u8], &'a [i8])`
   |
   = note: `#[warn(bare_trait_objects)]` on by default

warning: trait objects without an explicit `dyn` are deprecated
  --> src/ffi.rs:65:32
   |
65 |         let closure: &mut &mut for<'a> FnMut(&'a [i8], &'a [i8]) = mem::transmute(cb);
   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn for<'a> FnMut(&'a [i8], &'a [i8])`

warning: trait objects without an explicit `dyn` are deprecated
  --> src/ffi.rs:72:22
   |
72 |     let mut cb: &mut for<'a> FnMut(&'a [u8], &'a [u8]) = &mut f;
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn for<'a> FnMut(&'a [u8], &'a [u8])`

warning: trait objects without an explicit `dyn` are deprecated
  --> src/ffi.rs:99:22
   |
99 |     let mut cb: &mut for<'a> FnMut(&'a [u8], &'a [u8]) = &mut f;
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn for<'a> FnMut(&'a [u8], &'a [u8])`

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
 --> src/ffi.rs:8:28
  |
8 | use libc::{size_t, c_char, uint8_t, uint32_t, int32_t, c_void};
  |                            ^^^^^^^
  |
  = note: `#[warn(deprecated)]` on by default

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
 --> src/ffi.rs:8:37
  |
8 | use libc::{size_t, c_char, uint8_t, uint32_t, int32_t, c_void};
  |                                     ^^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
 --> src/ffi.rs:8:47
  |
8 | use libc::{size_t, c_char, uint8_t, uint32_t, int32_t, c_void};
  |                                               ^^^^^^^

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
  --> src/ffi.rs:22:25
   |
22 |     fn gen_keypair(len: uint32_t, h: *mut c_void, cb: extern fn(*mut c_void, *const c_char, size_t, *const c_char, size_t));//n
   |                         ^^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
  --> src/ffi.rs:23:48
   |
23 |     fn load_keypair(pk_s: *const c_char, pk_l: int32_t, vk_s: *const c_char, vk_l: int32_t)
   |                                                ^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
  --> src/ffi.rs:23:84
   |
23 |     fn load_keypair(pk_s: *const c_char, pk_l: int32_t, vk_s: *const c_char, vk_l: int32_t)
   |                                                                                    ^^^^^^^

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
  --> src/ffi.rs:26:45
   |
26 |                  cb: extern fn(*mut c_void, uint32_t, *const uint8_t, *const c_char, int32_t), 
   |                                             ^^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:26:62
   |
26 |                  cb: extern fn(*mut c_void, uint32_t, *const uint8_t, *const c_char, int32_t), 
   |                                                              ^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
  --> src/ffi.rs:26:86
   |
26 |                  cb: extern fn(*mut c_void, uint32_t, *const uint8_t, *const c_char, int32_t), 
   |                                                                                      ^^^^^^^

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
  --> src/ffi.rs:28:23
   |
28 |                  len: uint32_t, solution: *const uint8_t,
   |                       ^^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:28:50
   |
28 |                  len: uint32_t, solution: *const uint8_t,
   |                                                  ^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:29:30
   |
29 |                  key: *const uint8_t, h_of_key: *const uint8_t) -> bool;
   |                              ^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:29:56
   |
29 |                  key: *const uint8_t, h_of_key: *const uint8_t) -> bool;
   |                                                        ^^^^^^^

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
  --> src/ffi.rs:30:28
   |
30 |     fn decrypt_solution(n: uint32_t, enc: *mut uint8_t, key: *const uint8_t);
   |                            ^^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:30:48
   |
30 |     fn decrypt_solution(n: uint32_t, enc: *mut uint8_t, key: *const uint8_t);
   |                                                ^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:30:69
   |
30 |     fn decrypt_solution(n: uint32_t, enc: *mut uint8_t, key: *const uint8_t);
   |                                                                     ^^^^^^^

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
  --> src/ffi.rs:32:26
   |
32 |                     len: uint32_t,
   |                          ^^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:33:35
   |
33 |                     proof: *const uint8_t,
   |                                   ^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
  --> src/ffi.rs:34:32
   |
34 |                     proof_len: int32_t,
   |                                ^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:36:38
   |
36 |                     h_of_key: *const uint8_t,
   |                                      ^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:37:42
   |
37 |                     enc_solution: *const uint8_t
   |                                          ^^^^^^^

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
  --> src/ffi.rs:46:59
   |
46 | extern "C" fn handle_proof_callback(cb: *mut c_void, len: uint32_t, encrypted_solution: *const uint8_t, proof: *const c_char, proof_len: ...
   |                                                           ^^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:46:96
   |
46 | extern "C" fn handle_proof_callback(cb: *mut c_void, len: uint32_t, encrypted_solution: *const uint8_t, proof: *const c_char, proof_len: ...
   |                                                                                                ^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
  --> src/ffi.rs:46:138
   |
46 | ...ted_solution: *const uint8_t, proof: *const c_char, proof_len: int32_t)//n
   |                                                                   ^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
   --> src/ffi.rs:143:78
    |
143 |     unsafe { snark_verify(ctx.keypair, len as u32, &proof[0], proof.len() as int32_t, &h_of_key[0], &encrypted_solution[0]) }
    |                                                                              ^^^^^^^

warning: unused variable: `a`
   --> src/main.rs:418:13
    |
418 |     fn from(a: bincode::serde::SerializeError) -> ProtoError {
    |             ^ help: if this is intentional, prefix it with an underscore: `_a`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `a`
   --> src/main.rs:424:13
    |
424 |     fn from(a: bincode::serde::DeserializeError) -> ProtoError {
    |             ^ help: if this is intentional, prefix it with an underscore: `_a`

warning: unused variable: `dimension`
  --> src/sudoku.rs:15:12
   |
15 |     fn new(dimension: usize) -> Possible {
   |            ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dimension`

warning: unused variable: `undo`
   --> src/sudoku.rs:218:21
    |
218 |                 let undo = cell.set(candidate);
    |                     ^^^^ help: if this is intentional, prefix it with an underscore: `_undo`

warning: variable does not need to be mutable
   --> src/main.rs:223:16
    |
223 |               |mut encrypted_solution, proof| {
    |                ----^^^^^^^^^^^^^^^^^^
    |                |
    |                help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
  --> src/sudoku.rs:87:13
   |
87 |         let mut grid = Sudoku::new(n);
   |             ----^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/sudoku.rs:97:13
   |
97 |         let mut grid = Sudoku::new(n);
   |             ----^^^^
   |             |
   |             help: remove this `mut`

warning: associated function is never used: `import_and_solve`
  --> src/sudoku.rs:93:12
   |
93 |     pub fn import_and_solve(n: usize, puzzle: &[u8]) -> Option<Vec<u8>> {
   |            ^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: associated function is never used: `inject`
   --> src/sudoku.rs:139:12
    |
139 |     pub fn inject(&self, other: &[u8]) {
    |            ^^^^^^

warning: associated function is never used: `print`
   --> src/sudoku.rs:164:12
    |
164 |     pub fn print(&self) {
    |            ^^^^^

warning: associated function is never used: `clearsome`
   --> src/sudoku.rs:232:12
    |
232 |     pub fn clearsome<R: Rng>(&mut self, rng: &mut R) {
    |            ^^^^^^^^^

warning: function is never used: `prompt`
  --> src/util.rs:24:8
   |
24 | pub fn prompt<T: whiteread::White>(prompt: &str) -> Option<T> {
   |        ^^^^^^

warning: unused `std::result::Result` that must be used
  --> src/sudoku.rs:88:9
   |
88 |         grid.solve(&mut rng);
   |         ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_must_use)]` on by default
   = note: this `Result` may be an `Err` variant, which should be handled

warning: `extern` block uses type `Keypair`, which is not FFI-safe
  --> src/ffi.rs:24:12
   |
24 |         -> *const Keypair;
   |            ^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: `#[warn(improper_ctypes)]` on by default
   = help: consider adding a member to this struct
   = note: this struct has no fields
note: the type is defined here
  --> src/ffi.rs:11:1
   |
11 | struct Keypair;
   | ^^^^^^^^^^^^^^^

warning: `extern` block uses type `Keypair`, which is not FFI-safe
  --> src/ffi.rs:25:27
   |
25 |     fn gen_proof(keypair: *const Keypair, h: *mut c_void,
   |                           ^^^^^^^^^^^^^^ not FFI-safe
   |
   = help: consider adding a member to this struct
   = note: this struct has no fields
note: the type is defined here
  --> src/ffi.rs:11:1
   |
11 | struct Keypair;
   | ^^^^^^^^^^^^^^^

warning: `extern` block uses type `Keypair`, which is not FFI-safe
  --> src/ffi.rs:31:30
   |
31 |     fn snark_verify(keypair: *const Keypair,
   |                              ^^^^^^^^^^^^^^ not FFI-safe
   |
   = help: consider adding a member to this struct
   = note: this struct has no fields
note: the type is defined here
  --> src/ffi.rs:11:1
   |
11 | struct Keypair;
   | ^^^^^^^^^^^^^^^

warning: unused `std::result::Result` that must be used
  --> src/util.rs:64:17
   |
64 |                 decoder.finish();
   |                 ^^^^^^^^^^^^^^^^^
   |
   = note: this `Result` may be an `Err` variant, which should be handled

warning: 46 warnings emitted

    Finished release [optimized] target(s) in 0.01s
     Running `target/release/pay-to-sudoku generate_sudoku 6`
Generating puzzle...
./gen_sudoku.sh: line 3: 28283 Terminated              cargo +nightly run --release generate_sudoku $n
warning: trait objects without an explicit `dyn` are deprecated
  --> src/ffi.rs:53:32
   |
53 |         let closure: &mut &mut for<'a> FnMut(&'a [u8], &'a [i8]) = mem::transmute(cb);
   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn for<'a> FnMut(&'a [u8], &'a [i8])`
   |
   = note: `#[warn(bare_trait_objects)]` on by default

warning: trait objects without an explicit `dyn` are deprecated
  --> src/ffi.rs:65:32
   |
65 |         let closure: &mut &mut for<'a> FnMut(&'a [i8], &'a [i8]) = mem::transmute(cb);
   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn for<'a> FnMut(&'a [i8], &'a [i8])`

warning: trait objects without an explicit `dyn` are deprecated
  --> src/ffi.rs:72:22
   |
72 |     let mut cb: &mut for<'a> FnMut(&'a [u8], &'a [u8]) = &mut f;
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn for<'a> FnMut(&'a [u8], &'a [u8])`

warning: trait objects without an explicit `dyn` are deprecated
  --> src/ffi.rs:99:22
   |
99 |     let mut cb: &mut for<'a> FnMut(&'a [u8], &'a [u8]) = &mut f;
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn for<'a> FnMut(&'a [u8], &'a [u8])`

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
 --> src/ffi.rs:8:28
  |
8 | use libc::{size_t, c_char, uint8_t, uint32_t, int32_t, c_void};
  |                            ^^^^^^^
  |
  = note: `#[warn(deprecated)]` on by default

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
 --> src/ffi.rs:8:37
  |
8 | use libc::{size_t, c_char, uint8_t, uint32_t, int32_t, c_void};
  |                                     ^^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
 --> src/ffi.rs:8:47
  |
8 | use libc::{size_t, c_char, uint8_t, uint32_t, int32_t, c_void};
  |                                               ^^^^^^^

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
  --> src/ffi.rs:22:25
   |
22 |     fn gen_keypair(len: uint32_t, h: *mut c_void, cb: extern fn(*mut c_void, *const c_char, size_t, *const c_char, size_t));//n
   |                         ^^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
  --> src/ffi.rs:23:48
   |
23 |     fn load_keypair(pk_s: *const c_char, pk_l: int32_t, vk_s: *const c_char, vk_l: int32_t)
   |                                                ^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
  --> src/ffi.rs:23:84
   |
23 |     fn load_keypair(pk_s: *const c_char, pk_l: int32_t, vk_s: *const c_char, vk_l: int32_t)
   |                                                                                    ^^^^^^^

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
  --> src/ffi.rs:26:45
   |
26 |                  cb: extern fn(*mut c_void, uint32_t, *const uint8_t, *const c_char, int32_t), 
   |                                             ^^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:26:62
   |
26 |                  cb: extern fn(*mut c_void, uint32_t, *const uint8_t, *const c_char, int32_t), 
   |                                                              ^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
  --> src/ffi.rs:26:86
   |
26 |                  cb: extern fn(*mut c_void, uint32_t, *const uint8_t, *const c_char, int32_t), 
   |                                                                                      ^^^^^^^

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
  --> src/ffi.rs:28:23
   |
28 |                  len: uint32_t, solution: *const uint8_t,
   |                       ^^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:28:50
   |
28 |                  len: uint32_t, solution: *const uint8_t,
   |                                                  ^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:29:30
   |
29 |                  key: *const uint8_t, h_of_key: *const uint8_t) -> bool;
   |                              ^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:29:56
   |
29 |                  key: *const uint8_t, h_of_key: *const uint8_t) -> bool;
   |                                                        ^^^^^^^

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
  --> src/ffi.rs:30:28
   |
30 |     fn decrypt_solution(n: uint32_t, enc: *mut uint8_t, key: *const uint8_t);
   |                            ^^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:30:48
   |
30 |     fn decrypt_solution(n: uint32_t, enc: *mut uint8_t, key: *const uint8_t);
   |                                                ^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:30:69
   |
30 |     fn decrypt_solution(n: uint32_t, enc: *mut uint8_t, key: *const uint8_t);
   |                                                                     ^^^^^^^

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
  --> src/ffi.rs:32:26
   |
32 |                     len: uint32_t,
   |                          ^^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:33:35
   |
33 |                     proof: *const uint8_t,
   |                                   ^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
  --> src/ffi.rs:34:32
   |
34 |                     proof_len: int32_t,
   |                                ^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:36:38
   |
36 |                     h_of_key: *const uint8_t,
   |                                      ^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:37:42
   |
37 |                     enc_solution: *const uint8_t
   |                                          ^^^^^^^

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
  --> src/ffi.rs:46:59
   |
46 | extern "C" fn handle_proof_callback(cb: *mut c_void, len: uint32_t, encrypted_solution: *const uint8_t, proof: *const c_char, proof_len: ...
   |                                                           ^^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:46:96
   |
46 | extern "C" fn handle_proof_callback(cb: *mut c_void, len: uint32_t, encrypted_solution: *const uint8_t, proof: *const c_char, proof_len: ...
   |                                                                                                ^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
  --> src/ffi.rs:46:138
   |
46 | ...ted_solution: *const uint8_t, proof: *const c_char, proof_len: int32_t)//n
   |                                                                   ^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
   --> src/ffi.rs:143:78
    |
143 |     unsafe { snark_verify(ctx.keypair, len as u32, &proof[0], proof.len() as int32_t, &h_of_key[0], &encrypted_solution[0]) }
    |                                                                              ^^^^^^^

warning: unused variable: `a`
   --> src/main.rs:418:13
    |
418 |     fn from(a: bincode::serde::SerializeError) -> ProtoError {
    |             ^ help: if this is intentional, prefix it with an underscore: `_a`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `a`
   --> src/main.rs:424:13
    |
424 |     fn from(a: bincode::serde::DeserializeError) -> ProtoError {
    |             ^ help: if this is intentional, prefix it with an underscore: `_a`

warning: unused variable: `dimension`
  --> src/sudoku.rs:15:12
   |
15 |     fn new(dimension: usize) -> Possible {
   |            ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dimension`

warning: unused variable: `undo`
   --> src/sudoku.rs:218:21
    |
218 |                 let undo = cell.set(candidate);
    |                     ^^^^ help: if this is intentional, prefix it with an underscore: `_undo`

warning: variable does not need to be mutable
   --> src/main.rs:223:16
    |
223 |               |mut encrypted_solution, proof| {
    |                ----^^^^^^^^^^^^^^^^^^
    |                |
    |                help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
  --> src/sudoku.rs:87:13
   |
87 |         let mut grid = Sudoku::new(n);
   |             ----^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/sudoku.rs:97:13
   |
97 |         let mut grid = Sudoku::new(n);
   |             ----^^^^
   |             |
   |             help: remove this `mut`

warning: associated function is never used: `import_and_solve`
  --> src/sudoku.rs:93:12
   |
93 |     pub fn import_and_solve(n: usize, puzzle: &[u8]) -> Option<Vec<u8>> {
   |            ^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: associated function is never used: `inject`
   --> src/sudoku.rs:139:12
    |
139 |     pub fn inject(&self, other: &[u8]) {
    |            ^^^^^^

warning: associated function is never used: `print`
   --> src/sudoku.rs:164:12
    |
164 |     pub fn print(&self) {
    |            ^^^^^

warning: associated function is never used: `clearsome`
   --> src/sudoku.rs:232:12
    |
232 |     pub fn clearsome<R: Rng>(&mut self, rng: &mut R) {
    |            ^^^^^^^^^

warning: function is never used: `prompt`
  --> src/util.rs:24:8
   |
24 | pub fn prompt<T: whiteread::White>(prompt: &str) -> Option<T> {
   |        ^^^^^^

warning: unused `std::result::Result` that must be used
  --> src/sudoku.rs:88:9
   |
88 |         grid.solve(&mut rng);
   |         ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_must_use)]` on by default
   = note: this `Result` may be an `Err` variant, which should be handled

warning: `extern` block uses type `Keypair`, which is not FFI-safe
  --> src/ffi.rs:24:12
   |
24 |         -> *const Keypair;
   |            ^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: `#[warn(improper_ctypes)]` on by default
   = help: consider adding a member to this struct
   = note: this struct has no fields
note: the type is defined here
  --> src/ffi.rs:11:1
   |
11 | struct Keypair;
   | ^^^^^^^^^^^^^^^

warning: `extern` block uses type `Keypair`, which is not FFI-safe
  --> src/ffi.rs:25:27
   |
25 |     fn gen_proof(keypair: *const Keypair, h: *mut c_void,
   |                           ^^^^^^^^^^^^^^ not FFI-safe
   |
   = help: consider adding a member to this struct
   = note: this struct has no fields
note: the type is defined here
  --> src/ffi.rs:11:1
   |
11 | struct Keypair;
   | ^^^^^^^^^^^^^^^

warning: `extern` block uses type `Keypair`, which is not FFI-safe
  --> src/ffi.rs:31:30
   |
31 |     fn snark_verify(keypair: *const Keypair,
   |                              ^^^^^^^^^^^^^^ not FFI-safe
   |
   = help: consider adding a member to this struct
   = note: this struct has no fields
note: the type is defined here
  --> src/ffi.rs:11:1
   |
11 | struct Keypair;
   | ^^^^^^^^^^^^^^^

warning: unused `std::result::Result` that must be used
  --> src/util.rs:64:17
   |
64 |                 decoder.finish();
   |                 ^^^^^^^^^^^^^^^^^
   |
   = note: this `Result` may be an `Err` variant, which should be handled

warning: 46 warnings emitted

    Finished release [optimized] target(s) in 0.78s
     Running `target/release/pay-to-sudoku generate_sudoku 7`
Generating puzzle...
./gen_sudoku.sh: line 3:  2466 Terminated              cargo +nightly run --release generate_sudoku $n
warning: trait objects without an explicit `dyn` are deprecated
  --> src/ffi.rs:53:32
   |
53 |         let closure: &mut &mut for<'a> FnMut(&'a [u8], &'a [i8]) = mem::transmute(cb);
   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn for<'a> FnMut(&'a [u8], &'a [i8])`
   |
   = note: `#[warn(bare_trait_objects)]` on by default

warning: trait objects without an explicit `dyn` are deprecated
  --> src/ffi.rs:65:32
   |
65 |         let closure: &mut &mut for<'a> FnMut(&'a [i8], &'a [i8]) = mem::transmute(cb);
   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn for<'a> FnMut(&'a [i8], &'a [i8])`

warning: trait objects without an explicit `dyn` are deprecated
  --> src/ffi.rs:72:22
   |
72 |     let mut cb: &mut for<'a> FnMut(&'a [u8], &'a [u8]) = &mut f;
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn for<'a> FnMut(&'a [u8], &'a [u8])`

warning: trait objects without an explicit `dyn` are deprecated
  --> src/ffi.rs:99:22
   |
99 |     let mut cb: &mut for<'a> FnMut(&'a [u8], &'a [u8]) = &mut f;
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn for<'a> FnMut(&'a [u8], &'a [u8])`

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
 --> src/ffi.rs:8:28
  |
8 | use libc::{size_t, c_char, uint8_t, uint32_t, int32_t, c_void};
  |                            ^^^^^^^
  |
  = note: `#[warn(deprecated)]` on by default

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
 --> src/ffi.rs:8:37
  |
8 | use libc::{size_t, c_char, uint8_t, uint32_t, int32_t, c_void};
  |                                     ^^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
 --> src/ffi.rs:8:47
  |
8 | use libc::{size_t, c_char, uint8_t, uint32_t, int32_t, c_void};
  |                                               ^^^^^^^

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
  --> src/ffi.rs:22:25
   |
22 |     fn gen_keypair(len: uint32_t, h: *mut c_void, cb: extern fn(*mut c_void, *const c_char, size_t, *const c_char, size_t));//n
   |                         ^^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
  --> src/ffi.rs:23:48
   |
23 |     fn load_keypair(pk_s: *const c_char, pk_l: int32_t, vk_s: *const c_char, vk_l: int32_t)
   |                                                ^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
  --> src/ffi.rs:23:84
   |
23 |     fn load_keypair(pk_s: *const c_char, pk_l: int32_t, vk_s: *const c_char, vk_l: int32_t)
   |                                                                                    ^^^^^^^

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
  --> src/ffi.rs:26:45
   |
26 |                  cb: extern fn(*mut c_void, uint32_t, *const uint8_t, *const c_char, int32_t), 
   |                                             ^^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:26:62
   |
26 |                  cb: extern fn(*mut c_void, uint32_t, *const uint8_t, *const c_char, int32_t), 
   |                                                              ^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
  --> src/ffi.rs:26:86
   |
26 |                  cb: extern fn(*mut c_void, uint32_t, *const uint8_t, *const c_char, int32_t), 
   |                                                                                      ^^^^^^^

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
  --> src/ffi.rs:28:23
   |
28 |                  len: uint32_t, solution: *const uint8_t,
   |                       ^^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:28:50
   |
28 |                  len: uint32_t, solution: *const uint8_t,
   |                                                  ^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:29:30
   |
29 |                  key: *const uint8_t, h_of_key: *const uint8_t) -> bool;
   |                              ^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:29:56
   |
29 |                  key: *const uint8_t, h_of_key: *const uint8_t) -> bool;
   |                                                        ^^^^^^^

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
  --> src/ffi.rs:30:28
   |
30 |     fn decrypt_solution(n: uint32_t, enc: *mut uint8_t, key: *const uint8_t);
   |                            ^^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:30:48
   |
30 |     fn decrypt_solution(n: uint32_t, enc: *mut uint8_t, key: *const uint8_t);
   |                                                ^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:30:69
   |
30 |     fn decrypt_solution(n: uint32_t, enc: *mut uint8_t, key: *const uint8_t);
   |                                                                     ^^^^^^^

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
  --> src/ffi.rs:32:26
   |
32 |                     len: uint32_t,
   |                          ^^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:33:35
   |
33 |                     proof: *const uint8_t,
   |                                   ^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
  --> src/ffi.rs:34:32
   |
34 |                     proof_len: int32_t,
   |                                ^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:36:38
   |
36 |                     h_of_key: *const uint8_t,
   |                                      ^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:37:42
   |
37 |                     enc_solution: *const uint8_t
   |                                          ^^^^^^^

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
  --> src/ffi.rs:46:59
   |
46 | extern "C" fn handle_proof_callback(cb: *mut c_void, len: uint32_t, encrypted_solution: *const uint8_t, proof: *const c_char, proof_len: ...
   |                                                           ^^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:46:96
   |
46 | extern "C" fn handle_proof_callback(cb: *mut c_void, len: uint32_t, encrypted_solution: *const uint8_t, proof: *const c_char, proof_len: ...
   |                                                                                                ^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
  --> src/ffi.rs:46:138
   |
46 | ...ted_solution: *const uint8_t, proof: *const c_char, proof_len: int32_t)//n
   |                                                                   ^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
   --> src/ffi.rs:143:78
    |
143 |     unsafe { snark_verify(ctx.keypair, len as u32, &proof[0], proof.len() as int32_t, &h_of_key[0], &encrypted_solution[0]) }
    |                                                                              ^^^^^^^

warning: unused variable: `a`
   --> src/main.rs:418:13
    |
418 |     fn from(a: bincode::serde::SerializeError) -> ProtoError {
    |             ^ help: if this is intentional, prefix it with an underscore: `_a`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `a`
   --> src/main.rs:424:13
    |
424 |     fn from(a: bincode::serde::DeserializeError) -> ProtoError {
    |             ^ help: if this is intentional, prefix it with an underscore: `_a`

warning: unused variable: `dimension`
  --> src/sudoku.rs:15:12
   |
15 |     fn new(dimension: usize) -> Possible {
   |            ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dimension`

warning: unused variable: `undo`
   --> src/sudoku.rs:218:21
    |
218 |                 let undo = cell.set(candidate);
    |                     ^^^^ help: if this is intentional, prefix it with an underscore: `_undo`

warning: variable does not need to be mutable
   --> src/main.rs:223:16
    |
223 |               |mut encrypted_solution, proof| {
    |                ----^^^^^^^^^^^^^^^^^^
    |                |
    |                help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
  --> src/sudoku.rs:87:13
   |
87 |         let mut grid = Sudoku::new(n);
   |             ----^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/sudoku.rs:97:13
   |
97 |         let mut grid = Sudoku::new(n);
   |             ----^^^^
   |             |
   |             help: remove this `mut`

warning: associated function is never used: `import_and_solve`
  --> src/sudoku.rs:93:12
   |
93 |     pub fn import_and_solve(n: usize, puzzle: &[u8]) -> Option<Vec<u8>> {
   |            ^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: associated function is never used: `inject`
   --> src/sudoku.rs:139:12
    |
139 |     pub fn inject(&self, other: &[u8]) {
    |            ^^^^^^

warning: associated function is never used: `print`
   --> src/sudoku.rs:164:12
    |
164 |     pub fn print(&self) {
    |            ^^^^^

warning: associated function is never used: `clearsome`
   --> src/sudoku.rs:232:12
    |
232 |     pub fn clearsome<R: Rng>(&mut self, rng: &mut R) {
    |            ^^^^^^^^^

warning: function is never used: `prompt`
  --> src/util.rs:24:8
   |
24 | pub fn prompt<T: whiteread::White>(prompt: &str) -> Option<T> {
   |        ^^^^^^

warning: unused `std::result::Result` that must be used
  --> src/sudoku.rs:88:9
   |
88 |         grid.solve(&mut rng);
   |         ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_must_use)]` on by default
   = note: this `Result` may be an `Err` variant, which should be handled

warning: `extern` block uses type `Keypair`, which is not FFI-safe
  --> src/ffi.rs:24:12
   |
24 |         -> *const Keypair;
   |            ^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: `#[warn(improper_ctypes)]` on by default
   = help: consider adding a member to this struct
   = note: this struct has no fields
note: the type is defined here
  --> src/ffi.rs:11:1
   |
11 | struct Keypair;
   | ^^^^^^^^^^^^^^^

warning: `extern` block uses type `Keypair`, which is not FFI-safe
  --> src/ffi.rs:25:27
   |
25 |     fn gen_proof(keypair: *const Keypair, h: *mut c_void,
   |                           ^^^^^^^^^^^^^^ not FFI-safe
   |
   = help: consider adding a member to this struct
   = note: this struct has no fields
note: the type is defined here
  --> src/ffi.rs:11:1
   |
11 | struct Keypair;
   | ^^^^^^^^^^^^^^^

warning: `extern` block uses type `Keypair`, which is not FFI-safe
  --> src/ffi.rs:31:30
   |
31 |     fn snark_verify(keypair: *const Keypair,
   |                              ^^^^^^^^^^^^^^ not FFI-safe
   |
   = help: consider adding a member to this struct
   = note: this struct has no fields
note: the type is defined here
  --> src/ffi.rs:11:1
   |
11 | struct Keypair;
   | ^^^^^^^^^^^^^^^

warning: unused `std::result::Result` that must be used
  --> src/util.rs:64:17
   |
64 |                 decoder.finish();
   |                 ^^^^^^^^^^^^^^^^^
   |
   = note: this `Result` may be an `Err` variant, which should be handled

warning: 46 warnings emitted

    Finished release [optimized] target(s) in 0.05s
     Running `target/release/pay-to-sudoku generate_sudoku 8`
Generating puzzle...
./gen_sudoku.sh: line 3:  2579 Terminated              cargo +nightly run --release generate_sudoku $n
warning: trait objects without an explicit `dyn` are deprecated
  --> src/ffi.rs:53:32
   |
53 |         let closure: &mut &mut for<'a> FnMut(&'a [u8], &'a [i8]) = mem::transmute(cb);
   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn for<'a> FnMut(&'a [u8], &'a [i8])`
   |
   = note: `#[warn(bare_trait_objects)]` on by default

warning: trait objects without an explicit `dyn` are deprecated
  --> src/ffi.rs:65:32
   |
65 |         let closure: &mut &mut for<'a> FnMut(&'a [i8], &'a [i8]) = mem::transmute(cb);
   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn for<'a> FnMut(&'a [i8], &'a [i8])`

warning: trait objects without an explicit `dyn` are deprecated
  --> src/ffi.rs:72:22
   |
72 |     let mut cb: &mut for<'a> FnMut(&'a [u8], &'a [u8]) = &mut f;
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn for<'a> FnMut(&'a [u8], &'a [u8])`

warning: trait objects without an explicit `dyn` are deprecated
  --> src/ffi.rs:99:22
   |
99 |     let mut cb: &mut for<'a> FnMut(&'a [u8], &'a [u8]) = &mut f;
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn for<'a> FnMut(&'a [u8], &'a [u8])`

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
 --> src/ffi.rs:8:28
  |
8 | use libc::{size_t, c_char, uint8_t, uint32_t, int32_t, c_void};
  |                            ^^^^^^^
  |
  = note: `#[warn(deprecated)]` on by default

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
 --> src/ffi.rs:8:37
  |
8 | use libc::{size_t, c_char, uint8_t, uint32_t, int32_t, c_void};
  |                                     ^^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
 --> src/ffi.rs:8:47
  |
8 | use libc::{size_t, c_char, uint8_t, uint32_t, int32_t, c_void};
  |                                               ^^^^^^^

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
  --> src/ffi.rs:22:25
   |
22 |     fn gen_keypair(len: uint32_t, h: *mut c_void, cb: extern fn(*mut c_void, *const c_char, size_t, *const c_char, size_t));//n
   |                         ^^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
  --> src/ffi.rs:23:48
   |
23 |     fn load_keypair(pk_s: *const c_char, pk_l: int32_t, vk_s: *const c_char, vk_l: int32_t)
   |                                                ^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
  --> src/ffi.rs:23:84
   |
23 |     fn load_keypair(pk_s: *const c_char, pk_l: int32_t, vk_s: *const c_char, vk_l: int32_t)
   |                                                                                    ^^^^^^^

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
  --> src/ffi.rs:26:45
   |
26 |                  cb: extern fn(*mut c_void, uint32_t, *const uint8_t, *const c_char, int32_t), 
   |                                             ^^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:26:62
   |
26 |                  cb: extern fn(*mut c_void, uint32_t, *const uint8_t, *const c_char, int32_t), 
   |                                                              ^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
  --> src/ffi.rs:26:86
   |
26 |                  cb: extern fn(*mut c_void, uint32_t, *const uint8_t, *const c_char, int32_t), 
   |                                                                                      ^^^^^^^

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
  --> src/ffi.rs:28:23
   |
28 |                  len: uint32_t, solution: *const uint8_t,
   |                       ^^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:28:50
   |
28 |                  len: uint32_t, solution: *const uint8_t,
   |                                                  ^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:29:30
   |
29 |                  key: *const uint8_t, h_of_key: *const uint8_t) -> bool;
   |                              ^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:29:56
   |
29 |                  key: *const uint8_t, h_of_key: *const uint8_t) -> bool;
   |                                                        ^^^^^^^

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
  --> src/ffi.rs:30:28
   |
30 |     fn decrypt_solution(n: uint32_t, enc: *mut uint8_t, key: *const uint8_t);
   |                            ^^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:30:48
   |
30 |     fn decrypt_solution(n: uint32_t, enc: *mut uint8_t, key: *const uint8_t);
   |                                                ^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:30:69
   |
30 |     fn decrypt_solution(n: uint32_t, enc: *mut uint8_t, key: *const uint8_t);
   |                                                                     ^^^^^^^

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
  --> src/ffi.rs:32:26
   |
32 |                     len: uint32_t,
   |                          ^^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:33:35
   |
33 |                     proof: *const uint8_t,
   |                                   ^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
  --> src/ffi.rs:34:32
   |
34 |                     proof_len: int32_t,
   |                                ^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:36:38
   |
36 |                     h_of_key: *const uint8_t,
   |                                      ^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:37:42
   |
37 |                     enc_solution: *const uint8_t
   |                                          ^^^^^^^

warning: use of deprecated type alias `libc::uint32_t`: Use u32 instead.
  --> src/ffi.rs:46:59
   |
46 | extern "C" fn handle_proof_callback(cb: *mut c_void, len: uint32_t, encrypted_solution: *const uint8_t, proof: *const c_char, proof_len: ...
   |                                                           ^^^^^^^^

warning: use of deprecated type alias `libc::uint8_t`: Use u8 instead.
  --> src/ffi.rs:46:96
   |
46 | extern "C" fn handle_proof_callback(cb: *mut c_void, len: uint32_t, encrypted_solution: *const uint8_t, proof: *const c_char, proof_len: ...
   |                                                                                                ^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
  --> src/ffi.rs:46:138
   |
46 | ...ted_solution: *const uint8_t, proof: *const c_char, proof_len: int32_t)//n
   |                                                                   ^^^^^^^

warning: use of deprecated type alias `libc::int32_t`: Use i32 instead.
   --> src/ffi.rs:143:78
    |
143 |     unsafe { snark_verify(ctx.keypair, len as u32, &proof[0], proof.len() as int32_t, &h_of_key[0], &encrypted_solution[0]) }
    |                                                                              ^^^^^^^

warning: unused variable: `a`
   --> src/main.rs:418:13
    |
418 |     fn from(a: bincode::serde::SerializeError) -> ProtoError {
    |             ^ help: if this is intentional, prefix it with an underscore: `_a`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `a`
   --> src/main.rs:424:13
    |
424 |     fn from(a: bincode::serde::DeserializeError) -> ProtoError {
    |             ^ help: if this is intentional, prefix it with an underscore: `_a`

warning: unused variable: `dimension`
  --> src/sudoku.rs:15:12
   |
15 |     fn new(dimension: usize) -> Possible {
   |            ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dimension`

warning: unused variable: `undo`
   --> src/sudoku.rs:218:21
    |
218 |                 let undo = cell.set(candidate);
    |                     ^^^^ help: if this is intentional, prefix it with an underscore: `_undo`

warning: variable does not need to be mutable
   --> src/main.rs:223:16
    |
223 |               |mut encrypted_solution, proof| {
    |                ----^^^^^^^^^^^^^^^^^^
    |                |
    |                help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
  --> src/sudoku.rs:87:13
   |
87 |         let mut grid = Sudoku::new(n);
   |             ----^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/sudoku.rs:97:13
   |
97 |         let mut grid = Sudoku::new(n);
   |             ----^^^^
   |             |
   |             help: remove this `mut`

warning: associated function is never used: `import_and_solve`
  --> src/sudoku.rs:93:12
   |
93 |     pub fn import_and_solve(n: usize, puzzle: &[u8]) -> Option<Vec<u8>> {
   |            ^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: associated function is never used: `inject`
   --> src/sudoku.rs:139:12
    |
139 |     pub fn inject(&self, other: &[u8]) {
    |            ^^^^^^

warning: associated function is never used: `print`
   --> src/sudoku.rs:164:12
    |
164 |     pub fn print(&self) {
    |            ^^^^^

warning: associated function is never used: `clearsome`
   --> src/sudoku.rs:232:12
    |
232 |     pub fn clearsome<R: Rng>(&mut self, rng: &mut R) {
    |            ^^^^^^^^^

warning: function is never used: `prompt`
  --> src/util.rs:24:8
   |
24 | pub fn prompt<T: whiteread::White>(prompt: &str) -> Option<T> {
   |        ^^^^^^

warning: unused `std::result::Result` that must be used
  --> src/sudoku.rs:88:9
   |
88 |         grid.solve(&mut rng);
   |         ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_must_use)]` on by default
   = note: this `Result` may be an `Err` variant, which should be handled

warning: `extern` block uses type `Keypair`, which is not FFI-safe
  --> src/ffi.rs:24:12
   |
24 |         -> *const Keypair;
   |            ^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: `#[warn(improper_ctypes)]` on by default
   = help: consider adding a member to this struct
   = note: this struct has no fields
note: the type is defined here
  --> src/ffi.rs:11:1
   |
11 | struct Keypair;
   | ^^^^^^^^^^^^^^^

warning: `extern` block uses type `Keypair`, which is not FFI-safe
  --> src/ffi.rs:25:27
   |
25 |     fn gen_proof(keypair: *const Keypair, h: *mut c_void,
   |                           ^^^^^^^^^^^^^^ not FFI-safe
   |
   = help: consider adding a member to this struct
   = note: this struct has no fields
note: the type is defined here
  --> src/ffi.rs:11:1
   |
11 | struct Keypair;
   | ^^^^^^^^^^^^^^^

warning: `extern` block uses type `Keypair`, which is not FFI-safe
  --> src/ffi.rs:31:30
   |
31 |     fn snark_verify(keypair: *const Keypair,
   |                              ^^^^^^^^^^^^^^ not FFI-safe
   |
   = help: consider adding a member to this struct
   = note: this struct has no fields
note: the type is defined here
  --> src/ffi.rs:11:1
   |
11 | struct Keypair;
   | ^^^^^^^^^^^^^^^

warning: unused `std::result::Result` that must be used
  --> src/util.rs:64:17
   |
64 |                 decoder.finish();
   |                 ^^^^^^^^^^^^^^^^^
   |
   = note: this `Result` may be an `Err` variant, which should be handled

warning: 46 warnings emitted

    Finished release [optimized] target(s) in 0.03s
     Running `target/release/pay-to-sudoku generate_sudoku 9`
Generating puzzle...
./gen_sudoku.sh: line 3:  2695 Terminated              cargo +nightly run --release generate_sudoku $n
